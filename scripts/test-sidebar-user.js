// Script de teste para debugar problema do sidebar com usu√°rio espec√≠fico
// Execute com: node scripts/test-sidebar-user.js

const { createClient } = require('@supabase/supabase-js');

const SUPABASE_URL = "https://tfkchwuphjaauyfqptbk.supabase.co";
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRma2Nod3VwaGphYXV5ZnFwdGJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ3MzQyMDMsImV4cCI6MjA2MDMxMDIwM30.5hwAMrI2l_1L-DNvgCP3sYyzvxfajzerORY8AnUIZac";

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

async function testUserSidebarIssue() {
  console.log('üîç Testando problema do sidebar para usu√°rio espec√≠fico...\n');

  try {
    // 1. Verificar dados do usu√°rio problem√°tico
    console.log('1. Verificando usu√°rio valojos367@ofacer.com:');
    const { data: userData, error: userError } = await supabase
      .from('auth.users')
      .select('id, email, raw_user_meta_data')
      .eq('email', 'valojos367@ofacer.com')
      .single();

    if (userError) {
      console.error('‚ùå Erro ao buscar usu√°rio:', userError);
      return;
    }

    console.log('‚úÖ Usu√°rio encontrado:', {
      id: userData.id,
      email: userData.email,
      metadata_role: userData.raw_user_meta_data?.role
    });

    // 2. Verificar roles do usu√°rio
    console.log('\n2. Verificando roles:');
    const { data: rolesData, error: rolesError } = await supabase
      .from('user_roles')
      .select('role, clinic_id')
      .eq('user_id', userData.id);

    if (rolesError) {
      console.error('‚ùå Erro ao buscar roles:', rolesError);
      return;
    }

    console.log('‚úÖ Roles encontrados:', rolesData);

    // 3. Verificar se o role 'owner' est√° nos menus do sidebar
    const sidebarRoles = {
      'Dashboard': ['owner', 'admin', 'doctor', 'staff', 'receptionist'],
      'Calend√°rio': ['owner', 'admin', 'doctor', 'staff', 'receptionist'],
      'Pacientes': ['owner', 'admin', 'doctor', 'staff', 'receptionist'],
      'Profissionais': ['owner', 'admin'],
      'Relat√≥rios': ['owner', 'admin'],
      'Financeiro': ['owner', 'admin'],
      'Cl√≠nica': ['owner', 'admin'],
      'P√°gina P√∫blica': ['owner', 'admin'],
      'Configura√ß√µes': ['owner', 'admin', 'doctor', 'staff', 'receptionist']
    };

    console.log('\n3. Verificando permiss√µes do sidebar:');
    const userRoles = rolesData.map(r => r.role);
    
    Object.entries(sidebarRoles).forEach(([menu, allowedRoles]) => {
      const hasAccess = userRoles.some(role => allowedRoles.includes(role));
      console.log(`${hasAccess ? '‚úÖ' : '‚ùå'} ${menu}: ${hasAccess ? 'ACESSO' : 'SEM ACESSO'}`);
    });

    // 4. Simular l√≥gica do filtro do sidebar
    console.log('\n4. Simulando filtro do sidebar:');
    const filteredMenuItems = userRoles.length === 0 ? 
      Object.keys(sidebarRoles) : 
      Object.entries(sidebarRoles)
        .filter(([menu, allowedRoles]) => 
          userRoles.some(role => allowedRoles.includes(role))
        )
        .map(([menu]) => menu);

    console.log('Items do menu que devem aparecer:', filteredMenuItems);
    console.log('Total de items:', filteredMenuItems.length);

    // 5. Verificar cl√≠nica associada
    if (rolesData.some(r => r.clinic_id)) {
      console.log('\n5. Verificando cl√≠nica associada:');
      const clinicId = rolesData.find(r => r.clinic_id)?.clinic_id;
      
      const { data: clinicData, error: clinicError } = await supabase
        .from('clinics')
        .select('id, name, owner_id')
        .eq('id', clinicId)
        .single();

      if (clinicError) {
        console.error('‚ùå Erro ao buscar cl√≠nica:', clinicError);
      } else {
        console.log('‚úÖ Cl√≠nica encontrada:', {
          id: clinicData.id,
          name: clinicData.name,
          owner_id: clinicData.owner_id,
          isOwner: clinicData.owner_id === userData.id
        });
      }
    }

    // 6. Comparar com usu√°rio que funciona
    console.log('\n6. Comparando com usu√°rio leonhatori@gmail.com:');
    const { data: workingUserData } = await supabase
      .from('auth.users')
      .select('id, email, raw_user_meta_data')
      .eq('email', 'leonhatori@gmail.com')
      .single();

    const { data: workingRolesData } = await supabase
      .from('user_roles')
      .select('role, clinic_id')
      .eq('user_id', workingUserData.id);

    console.log('Usu√°rio que funciona:');
    console.log('- Metadata role:', workingUserData.raw_user_meta_data?.role);
    console.log('- DB roles:', workingRolesData.map(r => r.role));
    console.log('- Clinic associations:', workingRolesData.map(r => r.clinic_id));

    console.log('\nUsu√°rio com problema:');
    console.log('- Metadata role:', userData.raw_user_meta_data?.role);
    console.log('- DB roles:', rolesData.map(r => r.role));
    console.log('- Clinic associations:', rolesData.map(r => r.clinic_id));

    // 7. Conclus√£o
    console.log('\nüìä RESUMO DO DIAGN√ìSTICO:');
    console.log('='.repeat(50));
    
    if (filteredMenuItems.length > 0) {
      console.log('‚úÖ O usu√°rio DEVERIA ver o sidebar');
      console.log('‚ùå Mas n√£o est√° vendo = BUG na interface');
      console.log('\nüîß POSS√çVEIS CAUSAS:');
      console.log('- CSS/breakpoint responsivo');
      console.log('- Conditional rendering incorreto');
      console.log('- AuthContext n√£o carregando roles corretamente');
      console.log('- Problema de timing no carregamento');
    } else {
      console.log('‚ùå O usu√°rio N√ÉO deveria ver o sidebar');
      console.log('‚úÖ Comportamento correto');
    }

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

// Executar teste
testUserSidebarIssue();