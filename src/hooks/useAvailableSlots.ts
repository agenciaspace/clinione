
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

interface AvailableSlot {
  start_time: string;
  end_time: string;
  doctor_id: string;
  doctor_name: string;
}

export const useAvailableSlots = (clinicId: string, date: Date | undefined) => {
  const { data: slots, isLoading, error, refetch } = useQuery({
    queryKey: ['available-slots', clinicId, date?.toISOString()],
    queryFn: async () => {
      if (!date) {
        console.log('‚ùå Nenhuma data fornecida para buscar slots');
        return [];
      }
      
      console.log('üîç Buscando slots dispon√≠veis para:');
      console.log('  üìç Cl√≠nica ID:', clinicId);
      console.log('  üìÖ Data:', date.toISOString());
      
      // Garantir que estamos usando apenas a data sem o hor√°rio
      const formattedDate = date.toISOString().split('T')[0];
      console.log('  üìÖ Data formatada:', formattedDate);
      
      try {
        // Primeiro, verificar se a cl√≠nica tem working_hours configurados
        console.log('üè• Verificando dados da cl√≠nica...');
        const { data: clinicData, error: clinicError } = await supabase
          .from('clinics')
          .select('working_hours, name')
          .eq('id', clinicId)
          .single();
          
        if (clinicError) {
          console.error('‚ùå Erro ao buscar dados da cl√≠nica:', clinicError);
          if (clinicError.code === 'PGRST116') {
            console.log('‚ùå Cl√≠nica n√£o encontrada');
            return [];
          }
          throw new Error(`Erro ao carregar dados da cl√≠nica: ${clinicError.message}`);
        }
        
        console.log('‚úÖ Cl√≠nica encontrada:', clinicData.name);
        console.log('‚è∞ Working hours da cl√≠nica:', clinicData.working_hours);
          
        if (!clinicData?.working_hours) {
          console.log('‚ùå Cl√≠nica n√£o possui hor√°rios de funcionamento configurados');
          return [];
        }
        
        // Verificar se h√° hor√°rios para o dia da semana
        const dayOfWeek = new Date(formattedDate + 'T12:00:00').toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
        const dayHours = clinicData.working_hours[dayOfWeek];
        
        console.log(`üìÖ Dia da semana: ${dayOfWeek}`);
        console.log(`‚è∞ Hor√°rios para ${dayOfWeek}:`, dayHours);
        
        if (!dayHours || dayHours.length === 0) {
          console.log(`‚ùå Cl√≠nica fechada em ${dayOfWeek}`);
          return [];
        }
        
        // Verificar se h√° m√©dicos cadastrados
        console.log('üë®‚Äç‚öïÔ∏è Verificando m√©dicos cadastrados...');
        const { data: doctorsData, error: doctorsError } = await supabase
          .from('doctors')
          .select('id, name, speciality')
          .eq('clinic_id', clinicId);
          
        if (doctorsError) {
          console.error('‚ùå Erro ao buscar m√©dicos:', doctorsError);
          throw new Error(`Erro ao carregar m√©dicos: ${doctorsError.message}`);
        }
        
        if (!doctorsData || doctorsData.length === 0) {
          console.log('‚ùå Nenhum m√©dico cadastrado para esta cl√≠nica');
          return [];
        }
        
        console.log(`‚úÖ Encontrados ${doctorsData.length} m√©dicos:`);
        doctorsData.forEach(doctor => {
          console.log(`  - ${doctor.name} (${doctor.speciality || 'Sem especialidade'}) - ID: ${doctor.id}`);
        });
        
        // Buscar os hor√°rios dispon√≠veis usando a fun√ß√£o get_available_slots
        console.log('üîÑ Chamando fun√ß√£o get_available_slots...');
        const { data, error } = await supabase.rpc('get_available_slots', {
          p_clinic_id: clinicId,
          p_date: formattedDate,
        });

        if (error) {
          console.error('‚ùå Erro detalhado ao buscar slots dispon√≠veis:', error);
          console.error('   C√≥digo do erro:', error.code);
          console.error('   Mensagem:', error.message);
          console.error('   Detalhes:', error.details);
          throw new Error(`Erro ao carregar hor√°rios: ${error.message}`);
        }
        
        if (!data || data.length === 0) {
          console.log('‚ùå Nenhum slot dispon√≠vel encontrado');
          console.log('   Poss√≠veis causas:');
          console.log('   - Todos os hor√°rios j√° est√£o ocupados');
          console.log('   - Data/hora j√° passou');
          console.log('   - M√©dico n√£o tem hor√°rios configurados');
          return [];
        }
        
        console.log(`‚úÖ ${data.length} slots dispon√≠veis encontrados para ${formattedDate}:`);
        console.log('üìã Primeiros 5 slots:');
        data.slice(0, 5).forEach((slot: any, index: number) => {
          console.log(`   ${index + 1}. Dr(a). ${slot.doctor_name} - ${new Date(slot.start_time).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}`);
        });
        
        return data as AvailableSlot[];
      } catch (err: any) {
        console.error('üí• Erro inesperado ao buscar hor√°rios dispon√≠veis:', err);
        
        // Mostrar toast apenas para erros relevantes
        if (err.message && !err.message.includes('n√£o encontrada')) {
          toast.error('N√£o foi poss√≠vel carregar os hor√°rios dispon√≠veis');
        }
        
        return [];
      }
    },
    enabled: !!clinicId && !!date,
    retry: (failureCount, error: any) => {
      // N√£o tentar novamente para erros de dados n√£o encontrados
      if (error?.message?.includes('n√£o encontrada') || error?.code === 'PGRST116') {
        return false;
      }
      // Tentar novamente at√© 2 vezes para outros erros
      return failureCount < 2;
    },
    retryDelay: 1000,
    staleTime: 30000, // Cache por 30 segundos
    gcTime: 60000, // Manter no cache por 1 minuto
  });

  return {
    slots: slots || [],
    isLoading,
    error,
    refetch
  };
};
